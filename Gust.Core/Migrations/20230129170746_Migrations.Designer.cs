// <auto-generated />
using System;
using Gust.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gust.Core.Migrations
{
    [DbContext(typeof(GustCoreContext))]
    [Migration("20230129170746_Migrations")]
    partial class Migrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Gust.Core.Areas.Identity.Data.Forms.Equipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("CodigoBienesPatrimoniales")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("FechaCompra")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identificador")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("LaboratorioId")
                        .HasColumnType("int");

                    b.Property<string>("Modelo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NombreEquipo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VidaUtilEstimada")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id")
                        .HasName("PK_Equipo_Id");

                    b.HasIndex("CodigoBienesPatrimoniales")
                        .IsUnique()
                        .HasFilter("[CodigoBienesPatrimoniales] IS NOT NULL");

                    b.HasIndex("Identificador")
                        .IsUnique()
                        .HasFilter("[Identificador] IS NOT NULL");

                    b.HasIndex("LaboratorioId");

                    b.ToTable("Equipo");
                });

            modelBuilder.Entity("Gust.Core.Areas.Identity.Data.Forms.Laboratorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("CantidadComputadoras")
                        .HasColumnType("int");

                    b.Property<int?>("CantidadMesas")
                        .HasColumnType("int");

                    b.Property<int?>("CantidadSillas")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id")
                        .HasName("PK_Laboratorio_Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasFilter("[Codigo] IS NOT NULL");

                    b.ToTable("Laboratorio");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-401"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-402"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-403"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-404"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-405"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-406"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-407"
                        },
                        new
                        {
                            Id = 8,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-408"
                        },
                        new
                        {
                            Id = 9,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-409"
                        },
                        new
                        {
                            Id = 10,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-410"
                        },
                        new
                        {
                            Id = 11,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-BG01"
                        },
                        new
                        {
                            Id = 12,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-411"
                        },
                        new
                        {
                            Id = 13,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-412"
                        },
                        new
                        {
                            Id = 14,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-413"
                        },
                        new
                        {
                            Id = 15,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-414"
                        },
                        new
                        {
                            Id = 16,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-415"
                        },
                        new
                        {
                            Id = 17,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-416"
                        },
                        new
                        {
                            Id = 18,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-417"
                        },
                        new
                        {
                            Id = 19,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-418"
                        },
                        new
                        {
                            Id = 20,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-419"
                        },
                        new
                        {
                            Id = 21,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-420"
                        },
                        new
                        {
                            Id = 22,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-421"
                        },
                        new
                        {
                            Id = 23,
                            Activo = true,
                            CantidadComputadoras = 20,
                            CantidadMesas = 20,
                            CantidadSillas = 20,
                            Codigo = "3-422"
                        });
                });

            modelBuilder.Entity("Gust.Core.Areas.Identity.Data.Forms.Prestamo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CedulaPersona")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Duracion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaDevolucion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombrePersona")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UsuarioEntregaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsuarioRecibeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_Prestamo_Id");

                    b.HasIndex("EquipoId");

                    b.HasIndex("UsuarioEntregaId");

                    b.HasIndex("UsuarioRecibeId");

                    b.ToTable("Prestamo");
                });

            modelBuilder.Entity("Gust.Core.Areas.Identity.Data.Forms.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CedulaPersona")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Duracion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FechaDevolucion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FechaInicio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<string>("NombrePersona")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UsuarioEntregaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsuarioRecibeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_Reserva_Id");

                    b.HasIndex("LabId");

                    b.HasIndex("UsuarioEntregaId");

                    b.HasIndex("UsuarioRecibeId");

                    b.ToTable("Reserva");
                });

            modelBuilder.Entity("Gust.Core.Areas.Identity.Data.GustCoreUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Cedula")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Posicion")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Cedula")
                        .IsUnique()
                        .HasFilter("[Cedula] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c6f9759d-6b28-4821-93d7-af6142080843",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11f0715c-d195-465a-9cce-2d161bebe5ce",
                            Email = "omar.carvajal@utp.ac.pa",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OMAR.CARVAJAL@UTP.AC.PA",
                            NormalizedUserName = "OMAR.CARVAJAL@UTP.AC.PA",
                            PasswordHash = "AQAAAAEAACcQAAAAEN/l+HiUciWjv0TYqnh6ylIbCuZMHqaBGYcA9sIaE/AWGPOhavAd48uC2m1p3/4hrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb089fd0-1e2b-474e-b67e-3dff0d4526d6",
                            TwoFactorEnabled = false,
                            UserName = "omar.carvajal@utp.ac.pa"
                        });
                });

            modelBuilder.Entity("Gust.Core.Areas.Identity.Data.States.EstadoTarea", b =>
                {
                    b.Property<short>("CodigoEstado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("CodigoEstado"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoEstado");

                    b.ToTable("EstadoTarea");
                });

            modelBuilder.Entity("Gust.Core.Areas.Identity.Data.Tasks.Tarea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("EquipoId")
                        .HasColumnType("int");

                    b.Property<string>("Especificacion")
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)");

                    b.Property<string>("EstadoTarea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaAsignacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaFinalizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PersonaEncargadaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EquipoId");

                    b.HasIndex("PersonaEncargadaId");

                    b.ToTable("Tarea");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "18a7623e-e520-489c-a333-f81c38c76cb9",
                            ConcurrencyStamp = "eb0e0756-efd3-4981-b822-71f6cc23d388",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "a7779b67-fb31-4e02-b350-1114f4df2e7f",
                            ConcurrencyStamp = "7e054e56-c641-470c-9194-f17e1696a386",
                            Name = "Tecnico",
                            NormalizedName = "TEC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c6f9759d-6b28-4821-93d7-af6142080843",
                            RoleId = "18a7623e-e520-489c-a333-f81c38c76cb9"
                        },
                        new
                        {
                            UserId = "c6f9759d-6b28-4821-93d7-af6142080843",
                            RoleId = "a7779b67-fb31-4e02-b350-1114f4df2e7f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Gust.Core.Areas.Identity.Data.Forms.Equipo", b =>
                {
                    b.HasOne("Gust.Core.Areas.Identity.Data.Forms.Laboratorio", "Laboratorio")
                        .WithMany()
                        .HasForeignKey("LaboratorioId")
                        .HasConstraintName("FK_Equipo_LaboratorioId");

                    b.Navigation("Laboratorio");
                });

            modelBuilder.Entity("Gust.Core.Areas.Identity.Data.Forms.Prestamo", b =>
                {
                    b.HasOne("Gust.Core.Areas.Identity.Data.Forms.Equipo", "Equipo")
                        .WithMany("Prestamos")
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gust.Core.Areas.Identity.Data.GustCoreUser", "UsuarioEntrega")
                        .WithMany()
                        .HasForeignKey("UsuarioEntregaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Prestamo_UsuarioEntregaId");

                    b.HasOne("Gust.Core.Areas.Identity.Data.GustCoreUser", "UsuarioRecibe")
                        .WithMany()
                        .HasForeignKey("UsuarioRecibeId")
                        .HasConstraintName("FK_Prestamo_UsuarioRecibeId");

                    b.Navigation("Equipo");

                    b.Navigation("UsuarioEntrega");

                    b.Navigation("UsuarioRecibe");
                });

            modelBuilder.Entity("Gust.Core.Areas.Identity.Data.Forms.Reserva", b =>
                {
                    b.HasOne("Gust.Core.Areas.Identity.Data.Forms.Laboratorio", "Laboratorio")
                        .WithMany("Reservas")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gust.Core.Areas.Identity.Data.GustCoreUser", "UsuarioEntrega")
                        .WithMany()
                        .HasForeignKey("UsuarioEntregaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Reserva_UsuarioEntregaId");

                    b.HasOne("Gust.Core.Areas.Identity.Data.GustCoreUser", "UsuarioRecibe")
                        .WithMany()
                        .HasForeignKey("UsuarioRecibeId")
                        .HasConstraintName("FK_Reserva_UsuarioRecibeId");

                    b.Navigation("Laboratorio");

                    b.Navigation("UsuarioEntrega");

                    b.Navigation("UsuarioRecibe");
                });

            modelBuilder.Entity("Gust.Core.Areas.Identity.Data.Tasks.Tarea", b =>
                {
                    b.HasOne("Gust.Core.Areas.Identity.Data.Forms.Equipo", null)
                        .WithMany("Tareas")
                        .HasForeignKey("EquipoId");

                    b.HasOne("Gust.Core.Areas.Identity.Data.GustCoreUser", "PersonaEncargada")
                        .WithMany()
                        .HasForeignKey("PersonaEncargadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonaEncargada");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Gust.Core.Areas.Identity.Data.GustCoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Gust.Core.Areas.Identity.Data.GustCoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gust.Core.Areas.Identity.Data.GustCoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Gust.Core.Areas.Identity.Data.GustCoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gust.Core.Areas.Identity.Data.Forms.Equipo", b =>
                {
                    b.Navigation("Prestamos");

                    b.Navigation("Tareas");
                });

            modelBuilder.Entity("Gust.Core.Areas.Identity.Data.Forms.Laboratorio", b =>
                {
                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
